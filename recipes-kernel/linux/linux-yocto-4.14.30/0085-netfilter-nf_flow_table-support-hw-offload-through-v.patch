From 755d69fad165c16a0e771e73a4c664082b18790d Mon Sep 17 00:00:00 2001
From: Felix Fietkau <nbd@nbd.name>
Date: Thu, 15 Mar 2018 20:46:31 +0100
Subject: [PATCH 85/89] netfilter: nf_flow_table: support hw offload through
 virtual interfaces

There are hardware offload devices that support offloading VLANs and
PPPoE devices. Additionally, it is useful to be able to offload packets
routed through bridge interfaces as well.
Add support for finding the path to the offload device through these
virtual interfaces, while collecting useful parameters for the offload
device, like VLAN ID/protocol, PPPoE session and Ethernet MAC address.

Signed-off-by: Felix Fietkau <nbd@nbd.name>
---
 include/linux/netdevice.h                |  24 +++++
 include/net/netfilter/nf_flow_table.h    |  38 ++++++++
 include/uapi/linux/netfilter/nf_tables.h |   2 +
 net/netfilter/nf_flow_table_hw.c         | 149 +++++++++++++++++++++----------
 4 files changed, 168 insertions(+), 45 deletions(-)

diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index 46bf7cc7d5d5..f2135b209f70 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -826,6 +826,14 @@ struct xfrmdev_ops {
 };
 #endif
 
+struct flow_offload;
+struct flow_offload_hw_path;
+
+enum flow_offload_type {
+	FLOW_OFFLOAD_ADD	= 0,
+	FLOW_OFFLOAD_DEL,
+};
+
 /*
  * This structure defines the management hooks for network devices.
  * The following hooks can be defined; unless noted otherwise, they are
@@ -1057,6 +1065,17 @@ struct xfrmdev_ops {
  * int (*ndo_bridge_dellink)(struct net_device *dev, struct nlmsghdr *nlh,
  *			     u16 flags);
  *
+ * int (*ndo_flow_offload_check)(struct flow_offload_hw_path *path);
+ *	For virtual devices like bridges, vlan, and pppoe, fill in the
+ *	underlying network device that can be used for offloading connections.
+ *	Return an error if offloading is not supported.
+ *
+ * int (*ndo_flow_offload)(enum flow_offload_type type,
+ *			   struct flow_offload *flow,
+ *			   struct flow_offload_hw_path *src,
+ *			   struct flow_offload_hw_path *dest);
+ *	Adds/deletes flow entry to/from net device flowtable.
+ *
  * int (*ndo_change_carrier)(struct net_device *dev, bool new_carrier);
  *	Called to change device carrier. Soft-devices (like dummy, team, etc)
  *	which do not represent real hardware may define this to allow their
@@ -1281,6 +1300,11 @@ struct net_device_ops {
 	int			(*ndo_bridge_dellink)(struct net_device *dev,
 						      struct nlmsghdr *nlh,
 						      u16 flags);
+	int			(*ndo_flow_offload_check)(struct flow_offload_hw_path *path);
+	int			(*ndo_flow_offload)(enum flow_offload_type type,
+						    struct flow_offload *flow,
+						    struct flow_offload_hw_path *src,
+						    struct flow_offload_hw_path *dest);
 	int			(*ndo_change_carrier)(struct net_device *dev,
 						      bool new_carrier);
 	int			(*ndo_get_phys_port_id)(struct net_device *dev,
diff --git a/include/net/netfilter/nf_flow_table.h b/include/net/netfilter/nf_flow_table.h
index ba9fa4592f2b..da3c7358b49c 100644
--- a/include/net/netfilter/nf_flow_table.h
+++ b/include/net/netfilter/nf_flow_table.h
@@ -20,11 +20,17 @@ struct nf_flowtable_type {
 	struct module			*owner;
 };
 
+enum nf_flowtable_flags {
+	NF_FLOWTABLE_F_HW		= 0x1,
+};
+
 struct nf_flowtable {
 	struct list_head		list;
 	struct rhashtable		rhashtable;
 	const struct nf_flowtable_type	*type;
+	u32				flags;
 	struct delayed_work		gc_work;
+	possible_net_t			ft_net;
 };
 
 enum flow_offload_tuple_dir {
@@ -69,6 +75,7 @@ struct flow_offload_tuple_rhash {
 #define FLOW_OFFLOAD_DNAT	0x2
 #define FLOW_OFFLOAD_DYING	0x4
 #define FLOW_OFFLOAD_TEARDOWN	0x8
+#define FLOW_OFFLOAD_HW		0x10
 
 struct flow_offload {
 	struct flow_offload_tuple_rhash		tuplehash[FLOW_OFFLOAD_DIR_MAX];
@@ -79,6 +86,21 @@ struct flow_offload {
 	};
 };
 
+#define FLOW_OFFLOAD_PATH_ETHERNET	BIT(0)
+#define FLOW_OFFLOAD_PATH_VLAN		BIT(1)
+#define FLOW_OFFLOAD_PATH_PPPOE		BIT(2)
+
+struct flow_offload_hw_path {
+	struct net_device *dev;
+	u32 flags;
+
+	u8 eth_src[ETH_ALEN];
+	u8 eth_dest[ETH_ALEN];
+	u16 vlan_proto;
+	u16 vlan_id;
+	u16 pppoe_sid;
+};
+
 #define NF_FLOW_TIMEOUT (30 * HZ)
 
 struct nf_flow_route {
@@ -126,6 +148,22 @@ unsigned int nf_flow_offload_ip_hook(void *priv, struct sk_buff *skb,
 unsigned int nf_flow_offload_ipv6_hook(void *priv, struct sk_buff *skb,
 				       const struct nf_hook_state *state);
 
+void nf_flow_offload_hw_add(struct net *net, struct flow_offload *flow,
+			    struct nf_conn *ct);
+void nf_flow_offload_hw_del(struct net *net, struct flow_offload *flow);
+
+struct nf_flow_table_hw {
+	struct module	*owner;
+	void		(*add)(struct net *net, struct flow_offload *flow,
+			       struct nf_conn *ct);
+	void		(*del)(struct net *net, struct flow_offload *flow);
+};
+
+int nf_flow_table_hw_register(const struct nf_flow_table_hw *offload);
+void nf_flow_table_hw_unregister(const struct nf_flow_table_hw *offload);
+
+extern struct work_struct nf_flow_offload_hw_work;
+
 #define MODULE_ALIAS_NF_FLOWTABLE(family)	\
 	MODULE_ALIAS("nf-flowtable-" __stringify(family))
 
diff --git a/include/uapi/linux/netfilter/nf_tables.h b/include/uapi/linux/netfilter/nf_tables.h
index 66dceee0ae30..9a216a5f7b7c 100644
--- a/include/uapi/linux/netfilter/nf_tables.h
+++ b/include/uapi/linux/netfilter/nf_tables.h
@@ -1341,6 +1341,7 @@ enum nft_object_attributes {
  * @NFTA_FLOWTABLE_HOOK: netfilter hook configuration(NLA_U32)
  * @NFTA_FLOWTABLE_USE: number of references to this flow table (NLA_U32)
  * @NFTA_FLOWTABLE_HANDLE: object handle (NLA_U64)
+ * @NFTA_FLOWTABLE_FLAGS: flags (NLA_U32)
  */
 enum nft_flowtable_attributes {
 	NFTA_FLOWTABLE_UNSPEC,
@@ -1350,6 +1351,7 @@ enum nft_flowtable_attributes {
 	NFTA_FLOWTABLE_USE,
 	NFTA_FLOWTABLE_HANDLE,
 	NFTA_FLOWTABLE_PAD,
+	NFTA_FLOWTABLE_FLAGS,
 	__NFTA_FLOWTABLE_MAX
 };
 #define NFTA_FLOWTABLE_MAX	(__NFTA_FLOWTABLE_MAX - 1)
diff --git a/net/netfilter/nf_flow_table_hw.c b/net/netfilter/nf_flow_table_hw.c
index 3409dd4384c1..302a0490e64e 100644
--- a/net/netfilter/nf_flow_table_hw.c
+++ b/net/netfilter/nf_flow_table_hw.c
@@ -19,48 +19,75 @@ struct flow_offload_hw {
 	enum flow_offload_type	type;
 	struct flow_offload	*flow;
 	struct nf_conn		*ct;
-	possible_net_t		flow_hw_net;
+
+	struct flow_offload_hw_path src;
+	struct flow_offload_hw_path dest;
 };
 
-static int do_flow_offload_hw(struct net *net, struct flow_offload *flow,
-			      int type)
+static void flow_offload_check_ethernet(struct flow_offload_tuple *tuple,
+					struct flow_offload_hw_path *path)
 {
-	struct net_device *indev;
-	int ret, ifindex;
+	struct net_device *dev = path->dev;
+	struct neighbour *n;
 
-	ifindex = flow->tuplehash[FLOW_OFFLOAD_DIR_ORIGINAL].tuple.iifidx;
-	indev = dev_get_by_index(net, ifindex);
-	if (WARN_ON(!indev))
-		return 0;
+	if (dev->type != ARPHRD_ETHER)
+		return;
 
-	mutex_lock(&nf_flow_offload_hw_mutex);
-	ret = indev->netdev_ops->ndo_flow_offload(type, flow);
-	mutex_unlock(&nf_flow_offload_hw_mutex);
+	memcpy(path->eth_src, path->dev->dev_addr, ETH_ALEN);
+	n = dst_neigh_lookup(tuple->dst_cache, &tuple->src_v4);
+	if (!n)
+		return;
 
-	dev_put(indev);
+	memcpy(path->eth_dest, n->ha, ETH_ALEN);
+	path->flags |= FLOW_OFFLOAD_PATH_ETHERNET;
+	neigh_release(n);
+}
 
-	return ret;
+static int flow_offload_check_path(struct net *net,
+				   struct flow_offload_tuple *tuple,
+				   struct flow_offload_hw_path *path)
+{
+	struct net_device *dev;
+
+	dev = dev_get_by_index_rcu(net, tuple->iifidx);
+	if (!dev)
+		return -ENOENT;
+
+	path->dev = dev;
+	flow_offload_check_ethernet(tuple, path);
+
+	if (dev->netdev_ops->ndo_flow_offload_check)
+		return dev->netdev_ops->ndo_flow_offload_check(path);
+
+	return 0;
 }
 
-static void flow_offload_hw_work_add(struct flow_offload_hw *offload)
+static int do_flow_offload_hw(struct flow_offload_hw *offload)
 {
-	struct net *net;
+	struct net_device *src_dev = offload->src.dev;
+	struct net_device *dest_dev = offload->dest.dev;
 	int ret;
 
-	if (nf_ct_is_dying(offload->ct))
-		return;
+	ret = src_dev->netdev_ops->ndo_flow_offload(offload->type,
+						    offload->flow,
+						    &offload->src,
+						    &offload->dest);
+
+	/* restore devices in case the driver mangled them */
+	offload->src.dev = src_dev;
+	offload->dest.dev = dest_dev;
 
-	net = read_pnet(&offload->flow_hw_net);
-	ret = do_flow_offload_hw(net, offload->flow, FLOW_OFFLOAD_ADD);
-	if (ret >= 0)
-		offload->flow->flags |= FLOW_OFFLOAD_HW;
+	return ret;
 }
 
-static void flow_offload_hw_work_del(struct flow_offload_hw *offload)
+static void flow_offload_hw_free(struct flow_offload_hw *offload)
 {
-	struct net *net = read_pnet(&offload->flow_hw_net);
-
-	do_flow_offload_hw(net, offload->flow, FLOW_OFFLOAD_DEL);
+	dev_put(offload->src.dev);
+	dev_put(offload->dest.dev);
+	if (offload->ct)
+		nf_conntrack_put(&offload->ct->ct_general);
+	list_del(&offload->list);
+	kfree(offload);
 }
 
 static void flow_offload_hw_work(struct work_struct *work)
@@ -73,18 +100,22 @@ static void flow_offload_hw_work(struct work_struct *work)
 	spin_unlock_bh(&flow_offload_hw_pending_list_lock);
 
 	list_for_each_entry_safe(offload, next, &hw_offload_pending, list) {
+		mutex_lock(&nf_flow_offload_hw_mutex);
 		switch (offload->type) {
 		case FLOW_OFFLOAD_ADD:
-			flow_offload_hw_work_add(offload);
+			if (nf_ct_is_dying(offload->ct))
+				break;
+
+			if (do_flow_offload_hw(offload) >= 0)
+				offload->flow->flags |= FLOW_OFFLOAD_HW;
 			break;
 		case FLOW_OFFLOAD_DEL:
-			flow_offload_hw_work_del(offload);
+			do_flow_offload_hw(offload);
 			break;
 		}
-		if (offload->ct)
-			nf_conntrack_put(&offload->ct->ct_general);
-		list_del(&offload->list);
-		kfree(offload);
+		mutex_unlock(&nf_flow_offload_hw_mutex);
+
+		flow_offload_hw_free(offload);
 	}
 }
 
@@ -97,20 +128,55 @@ static void flow_offload_queue_work(struct flow_offload_hw *offload)
 	schedule_work(&nf_flow_offload_hw_work);
 }
 
+static struct flow_offload_hw *
+flow_offload_hw_prepare(struct net *net, struct flow_offload *flow)
+{
+	struct flow_offload_hw_path src = {};
+	struct flow_offload_hw_path dest = {};
+	struct flow_offload_tuple *tuple;
+	struct flow_offload_hw *offload = NULL;
+
+	rcu_read_lock_bh();
+
+	tuple = &flow->tuplehash[FLOW_OFFLOAD_DIR_ORIGINAL].tuple;
+	if (flow_offload_check_path(net, tuple, &src))
+		goto out;
+
+	tuple = &flow->tuplehash[FLOW_OFFLOAD_DIR_REPLY].tuple;
+	if (flow_offload_check_path(net, tuple, &dest))
+		goto out;
+
+	if (!src.dev->netdev_ops->ndo_flow_offload)
+		goto out;
+
+	offload = kzalloc(sizeof(struct flow_offload_hw), GFP_ATOMIC);
+	if (!offload)
+		goto out;
+
+	dev_hold(src.dev);
+	dev_hold(dest.dev);
+	offload->src = src;
+	offload->dest = dest;
+	offload->flow = flow;
+
+out:
+	rcu_read_unlock_bh();
+
+	return offload;
+}
+
 static void flow_offload_hw_add(struct net *net, struct flow_offload *flow,
 				struct nf_conn *ct)
 {
 	struct flow_offload_hw *offload;
 
-	offload = kmalloc(sizeof(struct flow_offload_hw), GFP_ATOMIC);
+	offload = flow_offload_hw_prepare(net, flow);
 	if (!offload)
 		return;
 
 	nf_conntrack_get(&ct->ct_general);
 	offload->type = FLOW_OFFLOAD_ADD;
 	offload->ct = ct;
-	offload->flow = flow;
-	write_pnet(&offload->flow_hw_net, net);
 
 	flow_offload_queue_work(offload);
 }
@@ -119,14 +185,11 @@ static void flow_offload_hw_del(struct net *net, struct flow_offload *flow)
 {
 	struct flow_offload_hw *offload;
 
-	offload = kmalloc(sizeof(struct flow_offload_hw), GFP_ATOMIC);
+	offload = flow_offload_hw_prepare(net, flow);
 	if (!offload)
 		return;
 
 	offload->type = FLOW_OFFLOAD_DEL;
-	offload->ct = NULL;
-	offload->flow = flow;
-	write_pnet(&offload->flow_hw_net, net);
 
 	flow_offload_queue_work(offload);
 }
@@ -153,12 +216,8 @@ static void __exit nf_flow_table_hw_module_exit(void)
 	nf_flow_table_hw_unregister(&flow_offload_hw);
 	cancel_work_sync(&nf_flow_offload_hw_work);
 
-	list_for_each_entry_safe(offload, next, &hw_offload_pending, list) {
-		if (offload->ct)
-			nf_conntrack_put(&offload->ct->ct_general);
-		list_del(&offload->list);
-		kfree(offload);
-	}
+	list_for_each_entry_safe(offload, next, &hw_offload_pending, list)
+		flow_offload_hw_free(offload);
 }
 
 module_init(nf_flow_table_hw_module_init);
-- 
2.11.0

