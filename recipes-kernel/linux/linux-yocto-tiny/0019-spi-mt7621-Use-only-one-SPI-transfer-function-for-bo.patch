From 65f36488e36288d420a8558e5bf3189c4dcc9d1d Mon Sep 17 00:00:00 2001
From: Stefan Roese <sr@denx.de>
Date: Tue, 4 Dec 2018 08:22:58 +0100
Subject: [PATCH] spi: mt7621: Use only one SPI transfer function for both
 chip-selects

The newly created xfer function for CS1 (SPI-NAND) should also be able
to handle all the xfers to CS0 (SPI-NOR). Let's use only this function,
since the other generates errors about too long SPI transfers.

Signed-off-by: Stefan Roese <sr@denx.de>
---
 drivers/spi/spi-mt7621.c | 109 +++------------------------------------
 1 file changed, 7 insertions(+), 102 deletions(-)

diff --git a/drivers/spi/spi-mt7621.c b/drivers/spi/spi-mt7621.c
index f5cacc4e6be9..a3b9815067c9 100644
--- a/drivers/spi/spi-mt7621.c
+++ b/drivers/spi/spi-mt7621.c
@@ -172,99 +172,6 @@ static inline int mt7621_spi_wait_till_ready(struct spi_device *spi)
 	return -ETIMEDOUT;
 }
 
-static int mt7621_spi_transfer_half_duplex(struct spi_master *master,
-						struct spi_message *m)
-{
-	struct mt7621_spi *rs = spi_master_get_devdata(master);
-	struct spi_device *spi = m->spi;
-	unsigned int speed = spi->max_speed_hz;
-	struct spi_transfer *t = NULL;
-	int status = 0;
-	int i, len = 0;
-	int rx_len = 0;
-	u32 data[9] = { 0 };
-	u32 val;
-
-	mt7621_spi_wait_till_ready(spi);
-
-	list_for_each_entry(t, &m->transfers, transfer_list) {
-		const u8 *buf = t->tx_buf;
-
-		if (t->rx_buf)
-			rx_len += t->len;
-
-		if (!buf)
-			continue;
-
-		if (t->speed_hz < speed)
-			speed = t->speed_hz;
-
-		/*
-		 * m25p80 might attempt to write more data than we can handle.
-		 * truncate the message to what we can fit into the registers
-		 */
-		if (len + t->len > 36)
-			t->len = 36 - len;
-
-		for (i = 0; i < t->len; i++, len++)
-			data[len / 4] |= buf[i] << (8 * (len & 3));
-	}
-
-	if (WARN_ON(rx_len > 32)) {
-		status = -EIO;
-		goto msg_done;
-	}
-
-	if (mt7621_spi_prepare(spi, speed)) {
-		status = -EIO;
-		goto msg_done;
-	}
-	data[0] = swab32(data[0]);
-	if (len < 4)
-		data[0] >>= (4 - len) * 8;
-
-	for (i = 0; i < len; i += 4)
-		mt7621_spi_write(rs, MT7621_SPI_OPCODE + i, data[i / 4]);
-
-	val = (min_t(int, len, 4) * 8) << 24;
-	if (len > 4)
-		val |= (len - 4) * 8;
-	val |= (rx_len * 8) << 12;
-	mt7621_spi_write(rs, MT7621_SPI_MOREBUF, val);
-
-	mt7621_spi_set_cs(spi, 1);
-
-	val = mt7621_spi_read(rs, MT7621_SPI_TRANS);
-	val |= SPI_CTL_START;
-	mt7621_spi_write(rs, MT7621_SPI_TRANS, val);
-
-	mt7621_spi_wait_till_ready(spi);
-
-	mt7621_spi_set_cs(spi, 0);
-
-	for (i = 0; i < rx_len; i += 4)
-		data[i / 4] = mt7621_spi_read(rs, MT7621_SPI_DATA0 + i);
-
-	m->actual_length = len + rx_len;
-
-	len = 0;
-	list_for_each_entry(t, &m->transfers, transfer_list) {
-		u8 *buf = t->rx_buf;
-
-		if (!buf)
-			continue;
-
-		for (i = 0; i < t->len; i++, len++)
-			buf[i] = data[len / 4] >> (8 * (len & 3));
-	}
-
-msg_done:
-	m->status = status;
-	spi_finalize_current_message(master);
-
-	return 0;
-}
-
 static int mt7621_spi_mb_transfer_half_duplex(struct spi_master *master,
 						struct spi_message *m)
 {
@@ -419,14 +326,7 @@ static int mt7621_spi_mb_transfer_half_duplex(struct spi_master *master,
 static int mt7621_spi_transfer_one_message(struct spi_master *master,
 						struct spi_message *m)
 {
-	struct spi_device *spi = m->spi;
-	int cs = spi->chip_select;
-
-	if (cs)
-		return mt7621_spi_mb_transfer_half_duplex(master, m);
-
-	/* Default behavior used for SPI NOR on CS0 */
-	return mt7621_spi_transfer_half_duplex(master, m);
+	return mt7621_spi_mb_transfer_half_duplex(master, m);
 }
 
 static int mt7621_spi_setup(struct spi_device *spi)
@@ -467,6 +367,7 @@ static int mt7621_spi_probe(struct platform_device *pdev)
 	int status = 0;
 	struct clk *clk;
 	struct mt7621_spi_ops *ops;
+	int ret;
 
 	match = of_match_device(mt7621_spi_match, &pdev->dev);
 	if (!match)
@@ -514,7 +415,11 @@ static int mt7621_spi_probe(struct platform_device *pdev)
 	rs->ops = ops;
 	dev_info(&pdev->dev, "sys_freq: %u\n", rs->sys_freq);
 
-	device_reset(&pdev->dev);
+	ret = device_reset(&pdev->dev);
+	if (ret) {
+		dev_err(&pdev->dev, "device_reset failed (%d)!\n", ret);
+		return ret;
+	}
 
 	mt7621_spi_reset(rs, 0);
 
