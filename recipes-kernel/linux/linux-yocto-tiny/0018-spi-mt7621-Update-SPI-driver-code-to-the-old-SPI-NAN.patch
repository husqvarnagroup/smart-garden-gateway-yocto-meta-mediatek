From 9dd3d8070b90da48a3aee3d1babef6114bc66ae3 Mon Sep 17 00:00:00 2001
From: Stefan Roese <sr@denx.de>
Date: Mon, 3 Dec 2018 16:28:21 +0100
Subject: [PATCH] spi: mt7621: Update SPI driver code to the "old SPI-NAND"
 framework code

This patch updates the MT7621 SPI driver to the code base used on the
v4.15 SPI-NAND framework. Please note that this is a plain copy and
definitely is not applicable to mainline and not checkpatck clean.

Signed-off-by: Stefan Roese <sr@denx.de>
---
 drivers/spi/spi-mt7621.c | 196 +++++++++++++++++++++++++--------------
 1 file changed, 128 insertions(+), 68 deletions(-)

diff --git a/drivers/spi/spi-mt7621.c b/drivers/spi/spi-mt7621.c
index 0f479079dbcf..f5cacc4e6be9 100644
--- a/drivers/spi/spi-mt7621.c
+++ b/drivers/spi/spi-mt7621.c
@@ -90,12 +90,7 @@ static void mt7621_spi_reset(struct mt7621_spi *rs, int duplex)
 
 	master |= 7 << 29;
 	master |= 1 << 2;
-#ifdef CONFIG_SOC_MT7620
-	if (duplex)
-		master |= 1 << 10;
-	else
-#endif
-		master &= ~(1 << 10);
+	master &= ~(1 << 10);
 
 	mt7621_spi_write(rs, MT7621_SPI_MASTER, master);
 }
@@ -106,7 +101,8 @@ static void mt7621_spi_set_cs(struct spi_device *spi, int enable)
 	int cs = spi->chip_select;
 	u32 polar = 0;
 
-        mt7621_spi_reset(rs, cs);
+	mt7621_spi_reset(rs, cs);
+
 	if (enable)
 		polar = BIT(cs);
 	mt7621_spi_write(rs, MT7621_SPI_POLAR, polar);
@@ -177,7 +173,7 @@ static inline int mt7621_spi_wait_till_ready(struct spi_device *spi)
 }
 
 static int mt7621_spi_transfer_half_duplex(struct spi_master *master,
-					   struct spi_message *m)
+						struct spi_message *m)
 {
 	struct mt7621_spi *rs = spi_master_get_devdata(master);
 	struct spi_device *spi = m->spi;
@@ -269,103 +265,167 @@ static int mt7621_spi_transfer_half_duplex(struct spi_master *master,
 	return 0;
 }
 
-#ifdef CONFIG_SOC_MT7620
-static int mt7621_spi_transfer_full_duplex(struct spi_master *master,
-					   struct spi_message *m)
+static int mt7621_spi_mb_transfer_half_duplex(struct spi_master *master,
+						struct spi_message *m)
 {
 	struct mt7621_spi *rs = spi_master_get_devdata(master);
 	struct spi_device *spi = m->spi;
 	unsigned int speed = spi->max_speed_hz;
 	struct spi_transfer *t = NULL;
 	int status = 0;
-	int i, len = 0;
-	int rx_len = 0;
+	int i = 0, len = 0;
+	u8 is_write = 0;
 	u32 data[9] = { 0 };
 	u32 val = 0;
+	u32 transfer_len = 0;
+	int cs_active = 0;
 
 	mt7621_spi_wait_till_ready(spi);
+	dev_dbg(&spi->dev, "seven spidev test ->cs:\n");
 
 	list_for_each_entry(t, &m->transfers, transfer_list) {
-		const u8 *buf = t->tx_buf;
-
-		if (t->rx_buf)
-			rx_len += t->len;
+		const u8 *txbuf = t->tx_buf;
+		u8 *rxbuf = t->rx_buf;
 
-		if (!buf)
-			continue;
-
-		if (WARN_ON(len + t->len > 16)) {
+		if (t->tx_buf == NULL && t->rx_buf == NULL && t->len) {
+			dev_err(&spi->dev,
+				 "message rejected: invalid transfer data buffers\n");
 			status = -EIO;
 			goto msg_done;
 		}
 
-		for (i = 0; i < t->len; i++, len++)
-			data[len / 4] |= buf[i] << (8 * (len & 3));
-		if (speed > t->speed_hz)
-			speed = t->speed_hz;
-	}
-
-	if (WARN_ON(rx_len > 16)) {
-		status = -EIO;
-		goto msg_done;
-	}
+		if (rxbuf)
+			is_write = 0;
+		else if(txbuf)
+			is_write = 1;
 
-	if (mt7621_spi_prepare(spi, speed)) {
-		status = -EIO;
-		goto msg_done;
-	}
-
-	for (i = 0; i < len; i += 4)
-		mt7621_spi_write(rs, MT7621_SPI_DATA0 + i, data[i / 4]);
-
-	val |= len * 8;
-	val |= (rx_len * 8) << 12;
-	mt7621_spi_write(rs, MT7621_SPI_MOREBUF, val);
-
-	mt7621_spi_set_cs(spi, 1);
-
-	val = mt7621_spi_read(rs, MT7621_SPI_TRANS);
-	val |= SPI_CTL_START;
-	mt7621_spi_write(rs, MT7621_SPI_TRANS, val);
-
-	mt7621_spi_wait_till_ready(spi);
-
-	mt7621_spi_set_cs(spi, 0);
-
-	for (i = 0; i < rx_len; i += 4)
-		data[i / 4] = mt7621_spi_read(rs, MT7621_SPI_DATA4 + i);
+		if (mt7621_spi_prepare(spi, speed)) {
+			status = -EIO;
+			goto msg_done;
+		}
 
-	m->actual_length = rx_len;
+		transfer_len = t->len/4;
+		if (!cs_active) {
+			mt7621_spi_set_cs(spi, 1);
+			cs_active = 1;
+		}
 
-	len = 0;
-	list_for_each_entry(t, &m->transfers, transfer_list) {
-		u8 *buf = t->rx_buf;
+		if(transfer_len) {   /* for word transfer */
+			u32 u32TxNum = 0;
+
+			while ( transfer_len > 0 ) {
+				u32TxNum = transfer_len % 8;
+				if ( !u32TxNum )
+					u32TxNum = 8;
+
+				for ( i=0; i<u32TxNum*4; i++) {
+					if ( is_write ) { /* for write transfer */
+						data[i / 4] |= *txbuf++ << (8 * (i & 3));
+					}
+					//else  /* for read transfer */
+				}
+#if 0
+				for(i=0; i<u32TxNum*4; i += 4)
+					printk("0x%x, ", data[i/4]);
+
+				printk("\n");
+#endif
+				data[0] = swab32(data[0]);
+				val = 0;
+				if(is_write) {
+					for(i=0; i<u32TxNum*4; i += 4)
+						mt7621_spi_write(rs, MT7621_SPI_OPCODE + i, data[i / 4]);
+
+					val = (min_t(int, u32TxNum*4, 4) * 8) << 24; /* must be set 32 */
+					val |= ((u32TxNum*4) - 4) * 8;               /* mosi_cnt */
+				} else
+					val |= ((u32TxNum*4) * 8) << 12;             /* miso_cnt */
+
+				mt7621_spi_write(rs, MT7621_SPI_MOREBUF, val);
+				val = mt7621_spi_read(rs, MT7621_SPI_TRANS);
+				val |= SPI_CTL_START;
+				mt7621_spi_write(rs, MT7621_SPI_TRANS, val);
+
+				mt7621_spi_wait_till_ready(spi);
+
+				if(!is_write) {
+					for (i = 0; i < u32TxNum*4; i += 4)
+						data[i / 4] = mt7621_spi_read(rs, MT7621_SPI_DATA0 + i);
+
+					for (i = 0; i < u32TxNum*4; i++)
+						*rxbuf++ = data[i / 4] >> (8 * (i & 3));
+				}
+
+				len += u32TxNum*4;
+				transfer_len -= u32TxNum;
+				memset(data, 0, sizeof(data));
+			}
+		}
 
-		if (!buf)
-			continue;
+		transfer_len = t->len % 4;
+		if(transfer_len) { /* for bytes transfer 0-3bytes*/
+			for ( i=0; i<transfer_len; i++ ) {
+				if(is_write)
+					data[i / 4] |= *txbuf++ << (8 * (i & 3));
+			}
+
+			data[0] = swab32(data[0]);
+			data[0] >>= (4 - transfer_len) * 8;
+
+			val = 0;
+			if(is_write) {
+				for(i=0; i<transfer_len; i += 4)
+					mt7621_spi_write(rs, MT7621_SPI_OPCODE + i, data[i / 4]);
+
+				val = (min_t(int, transfer_len, 4) * 8) << 24;  /* must be 32 */
+			} else {
+				 val |= (transfer_len* 8) << 12;         /* miso_cnt */
+			}
+			mt7621_spi_write(rs, MT7621_SPI_MOREBUF, val);
+			val = mt7621_spi_read(rs, MT7621_SPI_TRANS);
+			val |= SPI_CTL_START;
+			mt7621_spi_write(rs, MT7621_SPI_TRANS, val);
+
+			mt7621_spi_wait_till_ready(spi);
+
+			if(!is_write) {
+				for (i = 0; i < transfer_len; i += 4)
+					data[i / 4] = mt7621_spi_read(rs, MT7621_SPI_DATA0 + i);
+
+				for (i = 0; i < transfer_len; i++)
+					*rxbuf++ = data[i / 4] >> (8 * (i & 3));
+			}
+			len += transfer_len;
+			memset(data, 0, sizeof(data));
+		}
 
-		for (i = 0; i < t->len; i++, len++)
-			buf[i] = data[len / 4] >> (8 * (len & 3));
+		m->actual_length = len;     //+ rx_len;
+		if (t->cs_change) {
+			 mt7621_spi_set_cs(spi, 0);
+			 cs_active = 0;
+		}
 	}
 
 msg_done:
+	if (cs_active)
+		mt7621_spi_set_cs(spi, 0);
+
 	m->status = status;
 	spi_finalize_current_message(master);
 
 	return 0;
 }
-#endif
 
 static int mt7621_spi_transfer_one_message(struct spi_master *master,
-					   struct spi_message *m)
+						struct spi_message *m)
 {
 	struct spi_device *spi = m->spi;
-#ifdef CONFIG_SOC_MT7620
 	int cs = spi->chip_select;
 
 	if (cs)
-		return mt7621_spi_transfer_full_duplex(master, m);
-#endif
+		return mt7621_spi_mb_transfer_half_duplex(master, m);
+
+	/* Default behavior used for SPI NOR on CS0 */
 	return mt7621_spi_transfer_half_duplex(master, m);
 }
 
